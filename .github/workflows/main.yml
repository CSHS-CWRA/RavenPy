name: RavenPy

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  black:
    name: Code linting
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ github.token }}
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.8"
      - name: Install tox and setuptools
        run: |
          pip install tox
      - name: Run linting suite
        run: |
          tox -e black

  pip:
    name: Pip with Python${{ matrix.python-version }} on ${{ matrix.os }}
    needs: black
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      fail-fast: false
      matrix:
        include:
          - tox-env: py38
            python-version: "3.8"
            os: ubuntu-latest
          - tox-env: py39
            python-version: "3.9"
            os: ubuntu-latest
          - tox-env: py310
            python-version: "3.10"
            os: macos-latest
          - tox-env: py310
            python-version: "3.10"
            os: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install GDAL (Ubuntu)
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: |
        sudo apt-get update
        sudo apt-get install -q libgdal-dev
        echo "GDAL_VERSION=$(gdal-config --version)" >> $GITHUB_ENV

    - name: Install GDAL (macOS)
      if: ${{ matrix.os == 'macos-latest' }}
      uses: tecolicom/actions-use-homebrew-tools@v1
      with:
        tools: gdal
    - name: Where the heck is GDAL?
      if: ${{ matrix.os == 'macos-latest' }}
      run: |
        gdalinfo --version
        which gdalinfo
        echo "GDAL_VERSION=$(gdalinfo --version)" >> $GITHUB_ENV
    - name: Did we really find GDAL?
      run: |
        echo ${{ env.GDAL_VERSION }}

    - name: Install tox and setuptools
      run: |
        pip install tox
    - name: Test with tox and report coverage
      run: |
        tox -e ${{ matrix.tox-env }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        COVERALLS_FLAG_NAME: run-${{ matrix.tox-env }}
        COVERALLS_PARALLEL: true

  conda:
    name: Conda with Python${{ matrix.python-version }} on ${{ matrix.os }}
    needs: black
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      fail-fast: false
      matrix:
        include:
          - python-version: "3.8"
            os: windows-latest
          - python-version: "3.9"
            os: ubuntu-latest
          - python-version: "3.10"
            os: macos-latest
    steps:
      - uses: actions/checkout@v3
      - name: Sanitize environment.yml (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          sed -i '7d' environment.yml
      - name: Setup Conda (Micromamba) with Python${{ matrix.python-version }}
        uses: mamba-org/provision-with-micromamba@main
        with:
          cache-downloads: true
          environment-file: environment.yml
          extra-specs: |
            mamba
            python=${{ matrix.python-version }}
      - name: Mamba and Conda versions
        run: |
          mamba --version

      - name: LD_PRELOAD NetCDF source files
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          echo "LD_PRELOAD=$(find /home/runner/micromamba-root/envs/ravenpy -name libnetcdf.so)" >> $GITHUB_ENV
          echo ${{ env.LD_PRELOAD }}
      - name: DYLD_INSERT_LIBRARIES NetCDF source files
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          echo "DYLD_INSERT_LIBRARIES=$(find /Users/runner/micromamba-root/envs/ravenpy -name 'libnetcdf.*dylib')" >> $GITHUB_ENV
          echo ${{ env.DYLD_INSERT_LIBRARIES }}

      - name: Install RavenPy
        run: |
          pip install ".[dev,gis]"
      - name: Check Raven
        run: |
          raven -v
      - name: List installed packages
        run: |
          conda list
      - name: Test RavenPy
        run: |
          pytest --cov ravenpy
      - name: Report coverage
        run: |
          coveralls
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COVERALLS_FLAG_NAME: run-conda
          COVERALLS_PARALLEL: true

  finish:
    needs:
      - pip
      - conda
    runs-on: ubuntu-latest
    container: python:3-slim
    steps:
    - name: Coveralls Finished
      run: |
        pip install --upgrade coveralls
        coveralls --finish
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
