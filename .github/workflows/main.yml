name: RavenPy

on:
  push:
    branches:
      - master
  pull_request:

env:
  RAVENPY_TESTDATA_BRANCH: master

jobs:
  black:
    name: Code linting
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ github.token }}
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.9"
      - name: Install tox and setuptools
        run: |
          pip install tox
      - name: Run linting suite
        run: |
          tox -e black

  pip:
    name: Pip with Python${{ matrix.python-version }} on ${{ matrix.os }}
    needs: black
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      fail-fast: false
      matrix:
        include:
          - tox-env: py39-numpy
            python-version: "3.9"
            os: ubuntu-latest
          - tox-env: py310
            python-version: "3.10"
            os: macos-latest
          - tox-env: py310
            python-version: "3.10"
            os: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install GDAL (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install libgdal-dev
    - name: Install GDAL (macOS)
      if: matrix.os == 'macos-latest'
      uses: tecolicom/actions-use-homebrew-tools@v1
      with:
        tools: gdal
        cache: yes
    - name: Set GDAL_VERSION (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        echo "GDAL_VERSION=$(gdal-config --version)" >> $GITHUB_ENV
        echo "GDAL_HEADERS=/usr/include/gdal" >> $GITHUB_ENV
    - name: Set GDAL_VERSION (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        echo "GDAL_VERSION=$(gdalinfo --version | awk  '{print $2}' | sed s'/.$//')" >> $GITHUB_ENV
        echo "GDAL_HEADERS=/usr/local/include/gdal" >> $GITHUB_ENV

    - name: Install tox
      run: |
        python3 -m pip install tox~=4.0
    - name: Test with tox and report coverage
      run: |
        python3 -m tox -e ${{ matrix.tox-env }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        COVERALLS_FLAG_NAME: run-${{ matrix.tox-env }}
        COVERALLS_PARALLEL: true

  conda:
    name: Conda with Python${{ matrix.python-version }} on ${{ matrix.os }}
    needs: black
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      fail-fast: false
      matrix:
        include:
          - python-version: "3.9"
            os: windows-latest
            recipes: dev,gis
          - python-version: "3.9"
            os: macos-latest
            recipes: dev,gis
          - python-version: "3.9"
            os: ubuntu-latest
            recipes: dev,gis
    steps:
      - uses: actions/checkout@v3
      - name: Sanitize environment.yml (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          sed -i '7d' environment.yml
      - name: Setup Conda (Micromamba) with Python${{ matrix.python-version }}
        uses: mamba-org/provision-with-micromamba@main
        with:
          cache-downloads: true
          cache-env: true
          environment-file: environment.yml
          extra-specs: |
            mamba
            python=${{ matrix.python-version }}
      - name: List installed packages
        run: |
          conda list
      - name: Reload Conda environment
        run: |
          micromamba activate ravenpy
      - name: Test that Python-GDAL and NetCDF are installed
        run: |
          python -c "from osgeo import gdal"
          gdalinfo --version
          ncinfo -h
      - name: Mamba and Conda versions
        run: |
          mamba --version

      - name: Set LD_PRELOAD for NetCDF source files
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo "LD_PRELOAD=$(find /home/runner/micromamba-root/envs/ravenpy -name libnetcdf.*so | head -n 1)" >> $GITHUB_ENV
        # There must be a better way
      - name: Link NetCDF/HDF (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          sudo ln -s $(find /Users/runner/micromamba-root/envs/ravenpy -name libnetcdf.*dylib | head -n 1) /usr/local/lib/libnetcdf.19.dylib
          sudo ln -s $(find /Users/runner/micromamba-root/envs/ravenpy -name libmfhdf.*dylib | head -n 1) /usr/local/lib/libmfhdf.0.dylib
          sudo ln -s $(find /Users/runner/micromamba-root/envs/ravenpy -name libdf.*dylib | head -n 1) /usr/local/lib/libdf.0.dylib
          sudo ln -s $(find /Users/runner/micromamba-root/envs/ravenpy -name libhdf5_hl.*dylib | head -n 1) /usr/local/lib/libhdf5_hl.200.dylib
          sudo ln -s $(find /Users/runner/micromamba-root/envs/ravenpy -name libhdf5.*dylib | head -n 1) /usr/local/lib/libhdf5.200.dylib

      - name: Install RavenPy
        run: |
          python -m pip install ".[${{ matrix.recipes }}]"
      - name: Check Raven
        run: |
          raven -v
      - name: Test RavenPy
        run: |
          python -m pytest --cov --numprocesses=logical
      - name: Report coverage
        run: |
          python -m coveralls
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COVERALLS_FLAG_NAME: run-conda
          COVERALLS_PARALLEL: true

  finish:
    needs:
      - pip
      - conda
    runs-on: ubuntu-latest
    container: python:3-slim
    steps:
    - name: Coveralls Finished
      run: |
        pip install --upgrade coveralls
        coveralls --finish
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
